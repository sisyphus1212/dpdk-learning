

#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
	printf("Tracing tcp state.\n");

	@tcp_states[1] = "ESTABLISHED";
	@tcp_states[2] = "SYN_SENT";
	@tcp_states[3] = "SYN_RECV";
	@tcp_states[4] = "FIN_WAIT1";
	@tcp_states[5] = "FIN_WAIT2";
	@tcp_states[6] = "TIME_WAIT";
	@tcp_states[7] = "CLOSE";
	@tcp_states[8] = "CLOSE_WAIT";
	@tcp_states[9] = "LAST_ACK";
	@tcp_states[10] = "LISTEN";
	@tcp_states[11] = "CLOSING";
	@tcp_states[12] = "NEW_SYN_RECV";	
}

// 
kretprobe:inet_csk_accept
{
	$sk = (struct sock*)retval;
	$inet_family = $sk->__sk_common.skc_family;

	$daddr = ntop(0);
	$saddr = ntop(0);

	if ($inet_family == AF_INET) {

		$daddr = ntop($sk->__sk_common.skc_daddr);
		$saddr = ntop($sk->__sk_common.skc_rcv_saddr);		

	}
	
	$sport = $sk->__sk_common.skc_num;
	$dport = $sk->__sk_common.skc_dport;

	printf(" tcp_accept: %-16s:%d --> %-16s:%d\n", $daddr, $dport, $saddr, $sport);
}


kprobe:tcp_connect 
{
	$sk = ((struct sock*)arg0);
	$inet_family = $sk->__sk_common.skc_family;

	$daddr = ntop(0);
        $saddr = ntop(0);

        if ($inet_family == AF_INET) {

                $daddr = ntop($sk->__sk_common.skc_daddr);
                $saddr = ntop($sk->__sk_common.skc_rcv_saddr);

        }

        $sport = $sk->__sk_common.skc_num;
        $dport = $sk->__sk_common.skc_dport;

        printf(" tcp_connect: %-16s:%d --> %-16s:%d\n", $daddr, $dport, $saddr, $sport);
}

tracepoint:syscalls:sys_enter_connect
{
	@start[tid] = nsecs;
	printf("sys_enter_connect: %s --> %ld\n", comm, @start[tid]);
}

tracepoint:syscalls:sys_exit_connect
{
	@ms[comm] = sum(nsecs - @start[tid]);
	delete(@start[tid]);
	printf("sys_exit_connect: %s ", comm);
	print(@ms);
}

kprobe:tcp_fin
{
	$sk = ((struct sock*)arg0);
	
	$state = $sk->__sk_common.skc_state;
	$statestr = @tcp_states[$state];
	
	printf(" tcp_fin ");

	time("%H:%M:%S ");
	
	printf("%-8d %-16s %-16s\n", pid, comm, $statestr);	

}

END
{
	clear(@tcp_states);
	clear(@ms);
	clear(@start);
}

